// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // checking the instruciton type
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=insType);

    // write to memory
    And(a=instruction[3], b=instruction[15], out=writeM);

    // load to A or not based on the insType
    Mux(a=true, b=instruction[5], sel=instruction[15], out=Aload);
    ARegister(in=insType, load=Aload, out=Aout, out[0..14]=addressM);

    // load to D based on The insType
    And(a=instruction[4], b=instruction[15], out=Dload);
    DRegister(in=ALUout, load=Dload, out=Dout);

    // fetching from memory or register A.
    Mux16(a=Aout, b=inM, sel=instruction[12], out=ALUin);

    ALU(x=Dout, y=ALUin, zx=instruction[11],
                         nx=instruction[10],
                         zy=instruction[9],
                         ny=instruction[8],
                         f=instruction[7],
                         no=instruction[6],
                         out=ALUout, zr=zr,
                         ng=ng, out=outM);

    // jump logic
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);

    // JGT logic
    And(a=notzr, b=notng, out=JGT);
    // JEQ logic
    And(a=zr, b=notng, out=JEQ);
    // JGE
    And(a=true, b=notng, out=JGE);
    // JLT
    And(a=notzr, b=ng, out=JLT);
    // JNE
    And(a=notzr, b=true, out=JNE);
    // JLE
    Xor(a=ng, b=zr, out=JLE);

    Mux(a=false, b=JGT, sel=instruction[0], out=j01);
    Mux(a=JEQ, b=JGE, sel=instruction[0], out=j02);
    Mux(a=JLT, b=JNE, sel=instruction[0], out=j03);
    Mux(a=JLE, b=true, sel=instruction[0], out=j04);

    Mux(a=j01, b=j02, sel=instruction[1], out=j1);
    Mux(a=j03, b=j04, sel=instruction[1], out=j2);

    Mux(a=j1, b=j2, sel=instruction[2], out=j);

    Mux(a=false, b=j, sel=instruction[15], out=pcload);

    // PC
    PC(in=Aout, load=pcload, inc=true, reset=reset, out[0..14]=pc);
}